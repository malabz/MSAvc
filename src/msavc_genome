#!/usr/bin/bash

set -e

genome_value=""
input_value=
output_value=
gz_mode=
other_args=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -R)
      genome_value="$2"
      shift 2
      ;;
    -i|--in)
      input_value="$2"
      shift 2
      ;;
    -o|--out)
      output_value="$2"
      shift 2
      ;;
    -C|--compress-bgz)
      gz_mode="-Oz"
      shift
      ;;
    -v|--version)
      msavc --version
      exit 0
      ;;
    -h|--help)
      echo "$0 -R <genome_name> -i <input_file> -o <output_file>"
      echo "Extra argument: -C compress final file to .gz file"
      echo "Other arguments please see in 'msavc --help'"
      exit 1
      ;;
    *)
      other_args+=("$1")
      shift
      ;;
  esac
done

echo "Genome prefix: $genome_value"
echo "Input file: $input_value"
echo "Output file: $output_value"

if [[ "$input_value" == "" ]]; then
  echo "Error: no input file! Please check your arguments and run again."
  exit 1
fi

if [[ "$genome_value" == "" ]]; then
  echo "Error: no genome name! Please check your arguments and run again."
  exit 1
fi

if [[ "$output_value" == "" ]]; then
  echo "Error: no output file! Please check your arguments and run again."
  exit 1
fi

# process match sequences
matched_sequences=()

while read -r line; do
  if [[ "$line" == s\ * ]]; then
    seq_name=$(echo "$line" | awk '{print $2}')
    prefix=$(echo "$seq_name" | cut -d'.' -f1)
    if [[ "$prefix" == "$genome_value" ]]; then
      matched_sequences+=("$seq_name")
    fi
  fi
done < "$input_value"

matched_sequences=($(printf "%s\n" "${matched_sequences[@]}" | sort -u))
declare -A sample_set
mkdir -p $output_value-

if [[ ${#matched_sequences[@]} -eq 0 ]]; then
  echo "Not found $genome_value. Please check your arguments and try again."
  exit 1
else
  echo "Found and processing genomes:"
  for name in "${matched_sequences[@]}"; do
    echo "Processing $name..."
    msavc -r $name -o $output_value-/$name.vcf -i $input_value "${other_args[@]}" -C
    samples=$(bcftools view -h "$output_value-/$name.vcf.gz" | grep "^#CHROM" | cut -f10-)
    for sample in $samples; do
      sample_set["$sample"]=1
    done

  done
fi

> $output_value-/list-.txt
for sample in "${!sample_set[@]}"; do
  echo "$sample" >> $output_value-/list-.txt
done
sort $output_value-/list-.txt > $output_value-/list.txt


final_file=$output_value-/final.txt
> $final_file
touch $final_file

for name in "${matched_sequences[@]}"; do
  bcftools reheader -s $output_value-/list.txt -o $output_value-/-$name.vcf.gz $output_value-/$name.vcf.gz
  echo "$output_value-/-$name.vcf.gz" >> $final_file
done

echo "file: $final_file output: $output_value $gz_mode"
# bcftools merge -l $final_file -o $output_value $gz_mode
bcftools concat -f $final_file -o $output_value $gz_mode

rm -rf $output_value-